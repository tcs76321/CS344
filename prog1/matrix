#!/bin/bash

dimsNstdN=0 # helper variable for seeing if we need to deal with cat piping and stdin, only used with dims because I did a streamlined version for some of the functions

datafilepath="datafileUno" # store string datafileUno as datafilepath variable
datafilepath2="datafileDos"

if [ "$#" = "1" ] && [ "$1" == "dims" ] # check for if dims and being passed through stdin via piping or not
then
	dimsNstdN=3 # use helper variable, the number three is irrelevant, just not 0 now
	cat > "$datafilepath" # make a file basically, from that stdin stream
elif [ "$#" = "2" ] && [ "$1" == "dims" ] # two arguements, so not stdin in any way and dims 
then
	datafilepath=$2
fi # this is taken care of automatically in the way I handle the rest

dims(){
	if [[ "$dimsNstdN" -eq 0 ]] # normal, not from stdin, was passed a file
	then
		if [[ "$#" -gt  1 ]] # check for too many arguements, 2 or more, no negative numbers, leaving 1, 0 sets dimsNstdN to !0 so only correct arguements from this
		then
			echo incorrect number of parameters 1>&2 # print error message to stderr
			rm -f ./datafileDos # clean up files
			rm -f ./datafileUno
			exit 1 # set exit code to not 0, 1 is general error, misc
		elif [[ -r "$1" ]] # check that single static file exists and is readable
		then
			rows=0 # simple iterator, for lines and columns
			columns=0
			while read -r myLine
			do 
				rows=$(( rows + 1 ))
				for i in $myLine
				do
					columns=$(( columns + 1)) # count each individual number of the matrix,
				done
			done < "$datafilepath"
			columns=$(( columns / rows)) # and then divide by rows, lines, to get actual columns
			echo "$rows" "$columns"
			rm -f ./datafileDos
			rm -f ./datafileUno
			exit 0
		else
			echo inaccessible file or some other issue with -r 1>&2
			rm -f ./datafileDos
			rm -f ./datafileUno
			exit 1
		fi
	else # the first one was for if not catted and then now this one below is designed for it
		if [[ "$#" -gt  2 ]] # 
		then
			echo incorrect number of parameters 1>&2 # print error message to stderr
			rm -f ./datafileUno
			rm -f ./datafileDos
			exit 1
		elif [[ -r "$datafilepath" ]]
		then
			warningFiller=0
			rows=0
			columns=0
			while read -r myLine
			do 
				rows=$(( rows + 1 ))
				for i in $myLine
				do
					columns=$((columns + 1)) # count each individual number of the matrix,
					warningFiller="$i"
					i="$warningFiller"
				done
			done < "$datafilepath"
			columns=$(( columns / rows)) # and then divide by rows, lines, to get actual columns
			echo "$rows" "$columns"
			rm -f ./datafileUno
			rm -f ./datafileDos
			exit 0
		else
			echo inaccessible file or some other issue with -r 1>&2
			rm -f ./datafileUno
			rm -f ./datafileDos
			exit 1
		fi
	fi
}

transpose(){
	if [[ "$#" -ne "1" ]]
	then
		echo yo incorrect number of parameters yo 1>&2
		rm -f ./datafileUno
		rm -f ./datafileDos
		exit 1
	elif [[ -r "$1" ]]
	then
# ----------------- getting dims start
		jj=0
		ii=0
		while read -r myLine
		do 
			jj=$(( jj + 1 ))
			for iiii in $myLine
			do
				ii=$(( ii + 1 ))
			done
		done < "$1"
		ii=$(( ii / jj ))
		
		tempCol="tempcolfile"
		tempRow="temprowfile"

		indexH=1
		
		cut -f $indexH "$1" > $tempCol
		indexH=$(( indexH + 1 ))
		cat $tempCol | tr '\n' '\t' > $tempRow
		truncate -s-1 $tempRow
		echo >> $tempRow
		for (( ijk=1; ijk<ii ; ijk++ ));
		do
			cut -f $indexH "$1" > $tempCol
			cat $tempCol | tr '\n' '\t' >> $tempRow
			truncate -s-1 $tempRow
			echo >> $tempRow
			indexH=$(( indexH + 1 ))
		done

		cat $tempRow
		
		rm -f ./tempcolfile
		rm -f ./temprowfile
		rm -f ./datafileDos
		rm -f ./datafileUno
		exit 0
	else
		echo inaccessible file or some other issue with -r or!!!! dimensions!!!! 1>&2
		rm -f ./datafileUno
		rm -f ./datafileDos
		exit 1
	fi
}

mean(){
	if [[ "$#" -ne "1" ]]
	then
		echo yo incorrect number of parameters yo 1>&2
		rm -f ./datafileUno
		rm -f ./datafileDos
		exit 1
	elif [[ -r "$1" ]]
	then
# ----------------- getting dims start
		jj=0
		ii=0
		while read -r myLine
		do 
			jj=$(( jj + 1 ))
			for iiii in $myLine
			do
				ii=$(( ii + 1 ))
			done
		done < "$1"
		ii=$(( ii / jj ))
		
		tempCol="tempcolfile"
		tempRow="temprowfile"
		tempCol2="tempcol2file"

		indexH=1
		
		cut -f $indexH "$1" > $tempCol
		indexH=$(( indexH + 1 ))
		cat $tempCol | tr '\n' '\t' > $tempRow
		truncate -s-1 $tempRow
		echo >> $tempRow
		for (( ijk=1; ijk<ii ; ijk++ ));
		do
			cut -f $indexH "$1" > $tempCol
			cat $tempCol | tr '\n' '\t' >> $tempRow
			truncate -s-1 $tempRow
			echo >> $tempRow
			indexH=$(( indexH + 1 ))
		done

		while read -r tLine
		do
			yt=0
			dri=0
			for mno in $tLine
			do
				yt=$(( yt + mno ))
				dri=$(( dri + 1 ))
			done

			if [[ "$yt" -gt "0" ]]
			then
				yt=$(( ( ( yt + ( dri / 2 ) ) / dri ) ))
			else
				yt=$(( ( ( yt - ( dri / 2 ) ) / dri ) ))
			fi

			echo "$yt" >> $tempCol2
		done < $tempRow
		
		cat $tempCol2 | tr '\n' '\t' > $tempRow
		truncate -s-1 $tempRow
		echo >> $tempRow
		cat $tempRow

		rm -f ./tempcolfile
		rm -f ./tempcol2file
		rm -f ./temprowfile
		rm -f ./datafileDos
		rm -f ./datafileUno
		exit 0
	else
		echo inaccessible file or some other issue with -r or!!!! dimensions!!!! 1>&2
		rm -f ./datafileUno
		rm -f ./datafileDos
		exit 1
	fi
}

add(){
	if [[ "$#" -ne 2 ]]
	then
		echo yoincorrectnumberofparametersyo 1>&2
		rm -f ./datafileUno
		rm -f ./datafileDos
		exit 1
	elif [[ -r "$1" ]] && [[ -r "$2" ]]
	then
# ----------------- getting dims start
		jj=0
		ii=0 
		while read -r myLine
		do 
			jj=$(( jj + 1 ))
			for iiii in $myLine
			do
				ii=$(( ii + 1 ))
			done
		done < "$1"
		ii=$(( ii / jj ))


		jj2=0
		ii2=0 
		while read -r myLine2
		do 
			jj2=`expr $jj2 + 1`
			for iiii2 in $myLine2
			do
				ii2=`expr $ii2 + 1`
			done
		done < $2
		ii2=`expr $ii2 / $jj2`
# ----------------- gettings dims DONE
# -----------------------------------
# ------------------- checking dims
		if [[ "$ii" -ne "$ii2" ]] || [[ "$jj" -ne "$jj2" ]]
		then
			echo wrongs dims on add 1>&2
			rm -f ./datafileUno
			rm -f ./datafileDos
			exit 1
		fi
# ---------------------- Done with that

		cat $1 > "$datafilepath"
		cat $2 > "$datafilepath2"

		audiput=""

		while read var1 <&4 && read var2 <&5
		do
			audiput=""
			pleaseGod=0
			for ia in $var1
			do
				pleaseGod2=0
				for ib in $var2
				do
					if [[ "$pleaseGod" -eq "$pleaseGod2" ]]
					then
						aaa=0
						aaa=`expr $ia + $ib`
						audiput="${audiput}$aaa\t"
						break
					fi
					pleaseGod2=$((pleaseGod2+1))
				done
				pleaseGod=$((pleaseGod+1))
			done
			audiput=${audiput%?}
			audiput=${audiput%?}
			echo -e "$audiput"
		done 4<datafileUno 5<datafileDos
		
		rm -f ./datafileDos
		rm -f ./datafileUno
		exit 0
	else
		echo inaccessible file or some other issue with -r or!!!! dimensions!!!! 1>&2
		rm -f ./datafileUno
		rm -f ./datafileDos
		exit 1
	fi
}

multiply(){
	if [[ "$#" -ne 2 ]] # check correct number of arguements
	then
		echo yoincorrectnumberofparametersyo 1>&2
		rm -f ./datafileUno
		rm -f ./datafileDos
		exit 1
	elif [[ -r "$1" ]] && [[ -r "$2" ]]
	then
# ----------------- getting dims start
		rowsA=0
		colsA=0
		while read myLine
		do 
			rowsA=`expr $rowsA + 1`
			for iiii in $myLine
			do
				colsA=`expr $colsA + 1`
			done
		done < $1
		colsA=`expr $colsA / $rowsA`


		rowsB=0
		colsB=0
		while read myLine
		do 
			rowsB=`expr $rowsB + 1`
			for iiii in $myLine
			do
				colsB=`expr $colsB + 1`
			done
		done < $2
		colsB=`expr $colsB / $rowsB`
# ----------------- gettings dims DONE
# -----------------------------------
# ------------------- checking dims for multiplication
		if [[ "$colsA" -ne "$rowsB" ]]
		then
			echo wrongs dims on multiply 1>&2
			rm -f ./datafileUno
			rm -f ./datafileDos
			exit 1
		fi
# ---------------------- Done with that

		
		# get 1D arrays for each matrix
		arrayofA=()
		while read myLine
		do 
			for iiii in $myLine
			do
				arrayofA+=("$iiii")
			done
		done < $1
		
		arrayofB=()
		while read myLine
		do 
			for iiii in $myLine
			do
				arrayofB+=("$iiii")
			done
		done < $2
		
		resM=""
		
		# variables with proper dimensions of result matrix
		resMatrixRows="$rowsA"
		resMatrixColumns="$colsB"
		
		lengthA=${#arrayofA[@]}
		lengthB=${#arrayofB[@]}
		
		# variables need tat start at 0
		matA=0
		matB=0
		entry=0
		nMultAddsPerEntry="$colsA" # which equals row of B
		# for keeping track and thus calculating where the right numbers on the 1Ds are
		indexA=0 # this is changed back to 0 for first calculation of the first entry, entry resM11
		indexB=0
		counterA=`expr 0 - $colsA` # count which row of A, at the end of making each line we add to counterA the width of matrix A thus shiftin
	
		# for (( i=0; i<${len}; i++ ));
		
		# loop number of rows to append each row of matrix top to bottom
		for (( rowIter=0 ; rowIter<${resMatrixRows} ; rowIter++ )); do # unique dimension of A
			# first append the entries and tabs
			# loop for correct number of columns
			# after each loop through we need to first reset some things
			indexB=0
			# and counter needs to be increased the width of A
			# entered with a negative number first go around this makes it 0 and there after increments such to be used to reset indexA to be the first half pair with the current row of A
			counterA=`expr $counterA + $colsA` #, this is handled for first go around by setting indexA initialy to 0 minus widthA and afterwards push the row of A down one
			indexA="$counterA" # this is changed back to 0 for first calculation of the first entry, entry resM11
			for ((colIter=0 ; colIter<${resMatrixColumns} ; colIter++ )); do # unique dimension B
				# calculate proper number into entry
				# this number is found by adding the following fixed number of pair which are spaced consistently allowing our use of 1D arrays
				entry=0 # reset for adding onto self
				for ((pairsIter=0 ; pairsIter<${nMultAddsPerEntry} ; pairsIter++ )); do # SHARED dimension across A and B that is number of multiplied pairs of numbers added together
					# set matA to be proper number for A
					matA=${arrayofA[$indexA]}
					# change index to be next index, the last time this will be an invalid one unused as it is changed in the last iteration 
					indexA=`expr $indexA + 1`
					# TODO however, indices will also be used one OR more times so
					# set matB to be proper number for B
					matB=${arrayofB[$indexB]}
					indexB=`expr $indexB + $colsB`
					# multiply holders for matrix A against matrixB and equal entry to it
					matB=`expr $matA * $matB` # calculate
					entry=`expr $entry + $matB` # save
				done # repeat until all needed pairs are found multiplied and added up together and indexA/B become invalid or incorrect
				# check if index B went over, invalid
				if [[ "$indexB" -gt `expr $lengthB - 1` ]]
				then	
					indexB=`expr $indexB - $lengthB` # if so subtract length of 1dArrayOfB
					indexB=`expr $indexB + 1` # and add one to indexB to get next column
				fi
				# append with proper number and tab
				resM="${resM}$entry\t"
				# we need to reset indexA to what we entered with to get next entry with same row of A
				indexA="$counterA" # another reason to use the counterA
			done
			# and then remove extra tab
			resM=${resM%?}
			resM=${resM%?} # need a second one to remove first \ and then t
			# apply newline
			resM="${resM}\n"
		done
		
		# clean up weird extra newline
		resM=${resM%?}
		resM=${resM%?}
		
		# echo resulting Matrix
		echo -e "$resM"
		
		rm -f ./datafileDos
		rm -f ./datafileUno
		exit 0
	else # correct number of arguements but one of the two not readable
		echo inaccessible file or some other issue with -r or!!!! dimensions!!!! 1>&2
		rm -f ./datafileUno
		rm -f ./datafileDos
		exit 1
	fi
}

"${@}"
